<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Another blog for bearqq]]></title>
  <link href="http://bearqq.github.com/atom.xml" rel="self"/>
  <link href="http://bearqq.github.com/"/>
  <updated>2013-05-01T13:10:44+00:00</updated>
  <id>http://bearqq.github.com/</id>
  <author>
    <name><![CDATA[Bearqq]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[chroot方式在android（linux）中运行linux]]></title>
    <link href="http://bearqq.github.com/blog/2013/05/01/chroot-linux/"/>
    <updated>2013-05-01T11:52:00+00:00</updated>
    <id>http://bearqq.github.com/blog/2013/05/01/chroot-linux</id>
    <content type="html"><![CDATA[<h1>这是什么</h1>

<p>有时候，需要在一个linux里运行另外一个linux。<br/>
- 比如可以在android里运行linux，以此运行linux的原生程序，以及爽快的用apt-get安装程序
- 比如vps商只支持debian5，而军哥的lnmp需要debian6
- 比如openwrt路由里想挂载一个debian来做一些正常linux做的事
OK，以上都可以满足，而且我都干过。方法都类似。<br/>
整个过程可以在linux下，或者用android手机搞定。</p>

<h1>准备文件系统</h1>

<h2>准备镜像文件</h2>

<p>镜像文件也就是xxx.img。话说，openvz的vps，以及部分android手机是没有loop的，也就是不能挂载img文件，那么我只能说，呵呵。把东西放到img里当然可以使文件变得整齐点，也更灵活，当然这也并不是必须做的。如果不想做img，那也可以直接在linux分区里运行，但肯定不能是fat32什么的……</p>

<p>创建镜像</p>

<pre><code>dd if=/dev/zero of=floppy.img bs=1024 count=2048100
</code></pre>

<p>这里我建了一个大概2G的文件，不要在意细节~想更多自己弄。<br/>
格式化ext2</p>

<pre><code>mkfs.ext2 floppy.img
</code></pre>

<p>想要别的格式自己弄。</p>

<p>由于android手机新建镜像困难，这里给出<a href="http://bearsigh.googlecode.com/files/f.tgz">建好的img</a>，自行解压</p>

<p>挂载镜像</p>

<pre><code>mkdir debian
mount -o loop floppy.img debian/
</code></pre>

<p>卸载镜像</p>

<pre><code>umount debian
</code></pre>

<p>android手机可以把img放卡里，但是挂载的目标文件夹最好是放在data下，如</p>

<pre><code>cd /data
mkdir debian
mount -o loop /sdcard/floppy.img /data/debian/
</code></pre>

<p>并且，android手机可能需要安装busybox，并以busybox mount等形式执行</p>

<h2>系统文件，方法一 debian</h2>

<p>假设你手上有一台ubuntu//debian，那么可以用这个方式自己准备基础文件</p>

<pre><code>mkdir debian
</code></pre>

<p>当然，如果上面挂载了镜像，就cd到镜像挂载的上一级目录，因为待会儿会把文件释放到当前目录的debian目录下。</p>

<pre><code>sudo -s
apt-get install debootstrap
</code></pre>

<p>下载基础文件</p>

<pre><code>debootstrap --verbose --arch=armel --foreign squeeze debian http://ftp.us.debian.org/debian
</code></pre>

<p>这里我以arm架构为例。可自行更改，如i386，mips。
如此，基础文件已经准备就绪。</p>

<p>这里我提供很早以前准备的几个架构的基础文件，可以直接下下来解压到linux分区中。<br/>
<a href="http://bearsigh.googlecode.com/files/i386%20pure.tar.gz">i386</a>
<a href="http://bearsigh.googlecode.com/files/mips%20pure.tar.gz">mips</a>
<a href="http://bearsigh.googlecode.com/files/arm%20pure.tar">arm</a></p>

<p>然后需要将文件转移到目标文件系统中，如转移到android下并挂载，或转移到android的data目录下，或转移到openwrt的u盘中并且挂载。</p>

<p>进行第二阶段展开</p>

<pre><code>chroot debian /bin/bash
/debootstrap/debootstrap --second-stage
</code></pre>

<p>添加源</p>

<pre><code>echo 'deb http://ftp.us.debian.org/debian squeeze main contrib non-free' &gt; /etc/apt/sources.list
</code></pre>

<p>更新源</p>

<pre><code>export HOME=/root
export LC_ALL=C
apt-get update；apt-get upgrade
</code></pre>

<p>至此，文件系统搞定。</p>

<h2>系统文件，方法二 ubuntu</h2>

<p>ubuntu可以直接下到基础文件，并且解压到镜像或者目录中
如arm架构的<a href="https://releases.linaro.org/13.04/ubuntu/quantal-images">地址</a>。好简短的样子-。-</p>

<h2>系统文件，方法三 Backtrack</h2>

<p><a href="http://www.backtrack-linux.org/downloads/">Backtrack</a>从5开始就有arm架构的版本，当然x86架构肯定有的。下载下来就可以用，是个img文件。第6代名字更新为<a href="http://www.kali.org/downloads/">kali-linux</a></p>

<h1>安装一些必要的东西</h1>

<p>bt系统里东西够多了，alip版ubuntu里也不少，nano的和方法一里debian的就需要自己安装一些。</p>

<h2>进入系统的脚本</h2>

<p>如果中间没断开的话，那么现在是chroot到新linux里在运行。exit可以回到本机的shell。<br/>
那么如何从本机的shell里进去呢？参考脚本如下<br/>
挂载部分 startbt.sh:</p>

<pre><code>export kit=/sdcard/
export mnt=/data/debian
export PATH=$bin:/usr/bin:/usr/sbin:/bin:$PATH
export TERM=linux
export HOME=/root
# Mounting Image to the farthest loop point
# FIXME : check if mount sucessfull otherwise abort whole process.
mknod /dev/block/loop254 b 7 254
losetup /dev/block/loop254 $kit/floopy.img
mount -t ext2 /dev/block/loop254 $mnt

mount -t devpts devpts $mnt/dev/pts
mount -t proc proc $mnt/proc
mount -t sysfs sysfs $mnt/sys
#seting environment
sysctl -w net.ipv4.ip_forward=1
echo "Setting /etc/resolv.conf to Google Open DNS 8.8.8.8 and 8.8.4.4"
echo "nameserver 8.8.8.8" &gt; $mnt/etc/resolv.conf
echo "nameserver 8.8.4.4" &gt;&gt; $mnt/etc/resolv.conf
echo "127.0.0.1 localhost" &gt; $mnt/etc/hosts
</code></pre>

<p>同样，android上最好是mount等命令前加busybox。<br/>
进入shell bt.sh:</p>

<pre><code>export kit=/sdcard/
export mnt=/data/debian
export PATH=$bin:/usr/bin:/usr/sbin:/usr/local/bin/:/usr/local/sbin/:/bin:$PATH
export TERM=linux
export HOME=/root
export SHELL=/bin/bash
chroot $mnt /bin/bash
export LANG="C.UTF-8"
export LC_ALL="C.UTF-8"
</code></pre>

<p>那么开机以后，先要执行startbt.sh以挂载文件。一次即可。之后想要进入新linux的shell，只需在本机shell执行bt.sh。<br/>
如果不使用镜像，可酌情删去部分挂载镜像的语句。当然，也得修改镜像位置神马的。。</p>

<h2>安装一些可能有用的东西</h2>

<p>先来安装一堆节操</p>

<pre><code>apt-get install vim busybox wget screen
apt-get install gcc g++ make
apt-get install git 
</code></pre>

<p>桌面和vncserver</p>

<pre><code>apt-get install tightvncserver lxde xterm
vi /root/.vnc/xstartup
vncserver
</code></pre>

<p>默认端口5901</p>

<p>opera</p>

<pre><code>cat &gt;&gt;/etc/apt/sources.list&lt;&lt;END
deb http://deb.opera.com/opera/ stable non-free #Opera Browser (final releases)
END
wget -O - http://deb.opera.com/archive.key | apt-key add -
apt-get update
apt-get -y --force-yes install opera
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress安装过程摘要]]></title>
    <link href="http://bearqq.github.com/blog/2013/04/30/procedure/"/>
    <updated>2013-04-30T22:51:00+00:00</updated>
    <id>http://bearqq.github.com/blog/2013/04/30/procedure</id>
    <content type="html"><![CDATA[<h1>首先是一枚linux</h1>

<p>准备一枚linux是比较麻烦的事情，也有文章说windows可以，如<a href="http://sinosmond.github.io/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/">尝试win7的同学,</a>我也试了一下，不过在bundle install的时候报编译错误，然后就没有然后了。</p>

<p>我这里用的linux是arm版的ubuntu，先略过，只给一个连接以前在google code写的一个<a href="http://bearsigh.googlecode.com/files/i386pure.txt">debian的安装</a></p>

<h1>安装前的准备</h1>

<p>先安装git和ruby。ruby目前要求版本1.9.3，<a href="http://octopress.org/docs/setup/">详细查看</a>
命令：</p>

<pre><code>apt-get update;apt-get upgrade
apt-get install git ruby1.9.3
</code></pre>

<p>sudo神马的，自己加。chroot表示没有</p>

<pre><code>ruby --version
</code></pre>

<p>版本不对的话，参考官网解决</p>

<h1>安装octopress到本地</h1>

<p>首先找个像样的文件夹，然后</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<p>装依赖</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<p>下面就是主题了，如果是默认主题的话就简单</p>

<pre><code>rake install
</code></pre>

<h2>安装现成主题</h2>

<p>混蛋，当然是先要找个主题了，去<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">这里</a>挑一个看得上的，找到其git地址。然后</p>

<pre><code>cd octopress
git clone git://xxxxxx .themes/themename
rake install ['themename']
rake generate
</code></pre>

<h2>配置octopress</h2>

<p>按理说应该先配置吧-。-<br/>
配置文件_config.yml，可以vi编辑之。文件末尾有很多<strong>根本不存在的网站</strong>可以把那些值改成false而华丽丽的无视掉。<br/>
还有个要配置的，就是你的github了。去github新建个账号，比如bearqq。<br/>
然后建个repo叫bearqq.github.com，前面必须是你的名字。然后设置一下ssh的key，这个不想多说。<br/>
然后嘛</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>他会问你一些问题，如实回答即可。</p>

<h2>少年，来上第一发</h2>

<p>来写文章吧少年</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>然后他就会提示在哪儿哪儿生成了个交神马玩意的xxx.md文件，之后就去编辑一下吧。语法自己网上搜，没什么语法。尽可以进去以后打个hello world然后滚蛋。<br/>
话说，烦人的地方也在这里。有中文，需要用utf-8保存文件。如果生成文章的时候出错，那就在终端下执行</p>

<pre><code>export LANG="C.UTF-8"
export LC_ALL="C.UTF-8"
</code></pre>

<p>可能需要做得事情</p>

<pre><code>apt-get install language-pack-zh language-pack-zh-base language-support-zh
apt-get install locales
dpkg-reconfigure locales
export LC_ALL="zh_CN.UTF-8"
</code></pre>

<h2>生成文章</h2>

<p>每次写完神马的，都要做这件事</p>

<pre><code>rake generate
rake preview
</code></pre>

<p>preview可以内建一个服务器，端口4000，去浏览器里就能看到了。如果满意了的话，提交到github吧。</p>

<pre><code>rake deploy
</code></pre>

<p>第一次deploy要过十几分钟才能访问bearqq.github.com，后面会即使更新。</p>

<h2>添加评论</h2>

<p>尼玛一个博客没有评论敢出来溜达？？？</p>

<table>
    <tr>
        <td>
            &#31867;&#22411;
        </td>
        <td>
            &#22269;&#22806;&#26381;&#21153;
        </td>
        <td>
            &#22269;&#20869;&#26381;&#21153;
        </td>
    </tr>
    <tr>
        <td>
            Feed&#28903;&#21046; 
        </td>
        <td>
            FeedBurner 
        </td>
        <td>
            FeedSky
        </td>
    </tr>
    <tr>
        <td>
            &#20998;&#20139;&#21040; 
        </td>
        <td>
                AddThis 
        </td>
        <td>
            JiaThis
        </td>
    </tr>
    <tr>
        <td>
            &#24494;&#21338; 
        </td>
        <td>
                Twitter 
        </td>
        <td>
            weibo.com
        </td>
    </tr>
    <tr>
        <td>
            &#32593;&#32476;&#20070;&#31614; 
        </td>
        <td>
            Delicious, Google Bookmarks 
        </td>
        <td>
             QQ&#20070;&#31614;, &#30334;&#24230;&#25628;&#34255;
        </td>
    </tr>
    <tr>
        <td>
            &#32593;&#32476;&#22270;&#24202; 
        </td>
        <td>
            Flickr 
        </td>
        <td>
                yupoo , POCO
        </td>
    </tr>
    <tr>
        <td>
            &#32593;&#32476;&#35780;&#35770; 
        </td>
        <td>
            Disqus 
        </td>
        <td>
                &#21451;&#35328;
        </td>
    </tr>
</table>


<p>都同理可做，这里我用uyan.cc，因为代码简单-。-<br/>
去source/_includes/post，添加一个uyan.html，把uyan.cc网站上那段代码添加进去。
然后编辑_config.yml，文末加上</p>

<pre><code># uyan
uyan: true
</code></pre>

<p>最后去编辑source/_includes/article.html，在最后一个endif后面加上</p>

<pre><code>{ % if site.uyan % }
{ % include post/uyan.html % }
{ % endif % }
</code></pre>

<p>然后每个帖子后面都会有留言框了。记得generate然后deploy<br/>
<strong><em>上面的大括号和百分号之间没有空格！</em></strong> 如果我去掉空格那他就把他转意了……理论上代码块不该被转意的……尼玛</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world!]]></title>
    <link href="http://bearqq.github.com/blog/2013/04/30/hello-world-slash/"/>
    <updated>2013-04-30T20:04:00+00:00</updated>
    <id>http://bearqq.github.com/blog/2013/04/30/hello-world-slash</id>
    <content type="html"><![CDATA[<p>What happened?</p>
]]></content>
  </entry>
  
</feed>
