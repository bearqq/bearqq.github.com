<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Another blog for bearqq]]></title>
  <link href="http://blog.ooQoo.ovh/atom.xml" rel="self"/>
  <link href="http://blog.ooQoo.ovh/"/>
  <updated>2014-10-07T20:42:34+08:00</updated>
  <id>http://blog.ooQoo.ovh/</id>
  <author>
    <name><![CDATA[Bearqq]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopress in windows ]]></title>
    <link href="http://blog.ooQoo.ovh/blog/2014/10/07/octopress-in-windows/"/>
    <updated>2014-10-07T20:06:17+08:00</updated>
    <id>http://blog.ooQoo.ovh/blog/2014/10/07/octopress-in-windows</id>
    <content type="html"><![CDATA[<h1>终于搞定了windows下安装octopress</h1>

<p>真是折磨人。简单写写，参考之前写的。</p>

<p>先是安装git，在msysgit(<a href="https://github.com/msysgit/msysgit/releases">https://github.com/msysgit/msysgit/releases</a>)下载win版git，安的时候选择添加到系统path。</p>

<p>然后克隆下源码
    git clone git://github.com/imathis/octopress.git octopress<br/>
    cd octopress</p>

<p>安装ruby1.9.3，(<a href="http://rubyinstaller.org">http://rubyinstaller.org</a>)同样添加到path。并且下载相同版本dev，解压后打开msys.bat，进入之前octopress的文件夹。</p>

<p>安装依赖<br/>
    gem install bundler<br/>
    bundle install<br/>
找个主题安装，谷歌即可。然后安装<br/>
如果默认主题，使用<br/>
    rake install</p>

<h1>如果出现提示Set the codepage to 65001 for Windows machines.</h1>

<p>根据<a href="http://www.tomordonez.com/blog/2014/07/30/installing-octopress-in-windows-server/">老外的文章</a>，在octopress文件夹下<br/>
    gem install jekyll -v 2.1.0<br/>
编辑Gemfile为<br/>
    gem &lsquo;jekyll&rsquo;, &lsquo;2.1.0&rsquo;<br/>
然后<br/>
    bundle install<br/>
    bundle update jekyll<br/>
最后编辑Rakefile，去掉如下字样
    if (/cygwin &hellip;<br/>
      puts &lsquo;## Set the codepage to 65001 for windows machines&rsquo;<br/>
      &lsquo;chcp 65001&rsquo;<br/>
    end</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在arm架构linux中运行windows的X86程序exe]]></title>
    <link href="http://blog.ooQoo.ovh/blog/2013/06/06/run-x86-dot-exe-in-arm-linux/"/>
    <updated>2013-06-06T10:29:00+08:00</updated>
    <id>http://blog.ooQoo.ovh/blog/2013/06/06/run-x86-dot-exe-in-arm-linux</id>
    <content type="html"><![CDATA[<p>先来几句科普。A10是arm架构的cpu，就算你运行了linux也运行不了x86的程序。<br/>
linux显然不能直接运行windows的x86程序，因为<em>系统不同怎么谈恋爱？</em><br/>
那就有人要说了。这不可以那不可以，那不成标题党了么？当然不是，我就是要在arm架构的cpu运行着arm架构的linux中运行x86架构的windows程序。</p>

<h2>原理</h2>

<p>首先，为了在linux理运行x86的windows程序，我们需要一个中间层。当然不需要自己写，因为我们有wine。wine的x86版可以在x86架构的linux下运行x86的windows程序。<strong><em>但是wine的arm版只能在arm架构的linux下运行arm架构的windows程序！</em></strong><br/>
有了wine，我们还需要x86的linux。当然不能直接在arm的机器上运行，那么我们需要qemu。不需要运行整个系统，我们只需要运行i386-linux-user，chroot到x86的linux里运行即可。<br/>
更简单的说就是：
    arm-linux → qemu-user → i386-linux → wine → windows.exe
不要问我效率，问效率的都是渣渣。引用国外某孩子的话：very playable</p>

<h2>实现</h2>

<p>理想是美好的，现实是残酷的。qemu有致命bug，导致直接apt-get安装的qemu根本没法用，提示syscalls.c报错。要不是这个，这边文章早n个月就出来了。。<br/>
解决方案就是打补丁自行编译。<a href="http://forum.winehq.org/viewtopic.php?f=2&amp;t=17701&amp;start=25">补丁参考</a>。<br/>
由于版本更替，目测得手动去打补丁。帖子里两个补丁都得打。<br/>
大哥，有打好补丁编译好的版本么？当然有-。-
    <a href="http://pan.baidu.com/share/link?shareid=3480557522&amp;uk=1243757679">http://pan.baidu.com/share/link?shareid=3480557522&amp;uk=1243757679</a>
放之于
    /usr/bin/qemu-i386-static</p>

<p>有了qemu这座桥，下面就是i386-linux了。这里需要一个完整的i386的linux基础文件。。需要从我自己电脑考出来么？当然不用~多年前就准备好的i386-debian纯净版可以出场了。
    <a href="https://bearsigh.googlecode.com/files/i386%20pure.tar.gz">https://bearsigh.googlecode.com/files/i386%20pure.tar.gz</a>
使用方法参考<a href="http://bearqq.github.io/blog/2013/05/01/chroot-linux/"></a><br/>
这里除了要第二阶段展开等过程以外，还要安装一些东西。可以通过安装wine和lxde来解决对包的依赖。我安装了apt-get install lxde和一些字体。<br/>
然后去<a href="http://www.playonlinux.com/wine/binaries/linux-x86/">这里</a>下载一个最新的wine包，解压出来放到x86系统分区某处，如&#8221;/home/1.5.30-1.5.30-1/&ldquo;。</p>

<p>有了i386-linux和wine这座桥了，最后就达到windows.exe了。哈<br/>
贴上我的脚本</p>

<p>chrootx86：<br/>
    sysctl -w net.ipv4.ip_forward=1</p>

<pre><code>mount -t binfmt_misc none /proc/sys/fs/binfmt_misc
echo -1 &gt; /proc/sys/fs/binfmt_misc/status
echo ':i386:M::\x7fELF\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x03:\xff\xff\xff\xff\xff\xfe\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfb\xff\xff:/usr/bin/qemu-i386-static:' &gt; /proc/sys/fs/binfmt_misc/register



#DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANGUAGE=C LANG=C chroot /home/tp/x86/debian/ /bin/bash
export PATH=/home/1.5.30-1.5.30-1/bin:$PATH

DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANGUAGE=C LANG=C chroot /home/tp/x86/debian/ echo ':DOSWin:M::MZ::/home/1.5.30-1.5.30-1/bin/wine:' &gt;/proc/sys/fs/binfmt_misc/register

export WINEPREFIX=/root/wineprefix

DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true LC_ALL=C LANGUAGE=C LANG=C chroot /home/tp/x86/debian/ /home/1.5.30-1.5.30-1/bin/wine $@
</code></pre>

<p>我把x86的debian放到了&#8221;/home/tp/x86/debian/&ldquo;，自行修改脚本。<br/>
有效果图么？没图我说个jb！<br/>
<img src="http://ww2.sinaimg.cn/large/45e13792gw1e5elcs4mpfj20sg0goad5.jpg" alt="" />
<img src="http://ww4.sinaimg.cn/large/45e13792gw1e5emjwkkmdj20sg0gon0d.jpg" alt="" />
<img src="http://ww4.sinaimg.cn/large/45e13792gw1e5emkgdkd0j20sg0gote4.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更多ARM版linux下的事情。附带cubieboard修改版lubuntu，支持运行windows程序x86的exe]]></title>
    <link href="http://blog.ooQoo.ovh/blog/2013/06/06/linux-a10-cubieboard/"/>
    <updated>2013-06-06T09:20:00+08:00</updated>
    <id>http://blog.ooQoo.ovh/blog/2013/06/06/linux-a10-cubieboard</id>
    <content type="html"><![CDATA[<p><a href="http://bearqq.github.io/blog/2013/05/05/lubuntu/">上一篇文章</a>写了如何把原生linux安装到sdcard里，并在A10机型运行，这次再说一说怎么运行别的linux版本。</p>

<h3>移植别的linux</h3>

<h2>准备基础文件</h2>

<p>机器cpu是ARM的，linux文件也需要是为arm架构编译的。很多linux发行版都有arm架构支持，我还是以debian/ubuntu来说。<br/>
首先是准备基础文件，可以参考<a href="http://blog.ooqoo.org/blog/2013/05/01/chroot-linux/">在chroot那篇文章</a>里写的debian和ubuntu的文件准备，也可以是现成的别的发行版的系统文件。这里就不详细讲了，debian系的那篇文章里写了，别的系的略麻烦。这里不一定要是官方的文件，比如<a href="http://cubieboard.org/">cubieboard</a>就有提供为他的开发板定制的A10的ubuntu系统，也可以是为pi提供的系统，或者别的开发板的都可以。<br/>
唯一有一点区别的还是在架构上。arm分为armel和armhf，树莓派只支持armel，而A10可以跑armel和armhf，区别<a href="http://www.claudxiao.net/2012/02/armhf/">可以参考</a>A10当然选armhf的来做了。<br/>
下载了文件系统部分之后，直接复制到sd卡的第二分区。什么？sd卡没有第二分区？参考<a href="http://bearqq.github.io/blog/2013/05/05/lubuntu/">上一篇文章</a>入门。</p>

<h2>准备内核和驱动</h2>

<p>系统文件准备了以后还需要添加内核和驱动。这里给出几个方案：<br/>
首先是来自<a href="http://pengpod.com/dl/images/">pengpod编译的内核和驱动3.0.57</a>推荐用这个<br/>
    <a href="http://pan.baidu.com/share/link?shareid=3149881464&amp;uk=1243757679">http://pan.baidu.com/share/link?shareid=3149881464&amp;uk=1243757679</a>
然后是我编译的3.0.8。里面不包含mali驱动
    <a href="http://pan.baidu.com/share/link?shareid=3166131842&amp;uk=1243757679">http://pan.baidu.com/share/link?shareid=3166131842&amp;uk=1243757679</a>
当然也可以自己编译
    apt-get install build-essential git
    apt-get install u-boot-tools (if u-boot-tools not found, try uboot-mkimage)
    编译器下载、解压、添加环境
    wget &ldquo;<a href="https://sourcery.mentor.com/GNUToolchain/package5383/public/arm-none-linux-gnueabi/arm-2009q3-67-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2">https://sourcery.mentor.com/GNUToolchain/package5383/public/arm-none-linux-gnueabi/arm-2009q3-67-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2</a>&rdquo;
    export PATH=&ldquo;/home/android/sc/arm-2009q3/bin/:$PATH&rdquo;
    代码下载
    git clone git://github.com/linux-sunxi/linux-sunxi.git
    cd linux-allwinner
    git checkout lichee-3.0.8-sun4i
    编译
    make ARCH=arm sun4i_defconfig
    make ARCH=arm menuconfig
    make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- -j3 uImage
    make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- -j3 INSTALL_MOD_PATH=output modules
    make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- -j3 INSTALL_MOD_PATH=output modules_install
    输出文件在arch/arm/boot/uImage 和output文件夹下
    触摸支持需要禁用多点触摸，参考<a href="https://github.com/bearqq/A10-ubuntu-touch-ft5x">https://github.com/bearqq/A10-ubuntu-touch-ft5x</a>
    非root访问网络需要修改配置文件# CONFIG_ANDROID_PARANOID_NETWORK is not set</p>

<h2>安装内核驱动</h2>

<p>将得到的内核uImage复制到sd卡第一分区，将lib的文件放到第二分区的lib/modules下，如lib/modules/3.0.8/xxx</p>

<h2>其他修正、添加</h2>

<p>文件系统准备好以后，可以chroot进去做点事。参考：<br/>
    sudo chroot /media/sdcard2/ /bin/bash
安装软键盘<br/>
    apt-get install cellwriter
修改加载的驱动<br/>
    vi /etc/modules
    disp
    lcd
    hdmi
    mali
    mali_drm
    ft5x_ts
    sun4i_keyboard
    ump
    8192cu
添加用户<br/>
    自己弄。。
设置自动登录。如<br/>
    /etc/lxdm/default.conf
    vi /etc/lxdm/default.conf
    autologin=username
也可能是：<br/>
    vi /etc/lightdm/lightdm.conf
    [SeatDefaults]
    autologin-user=username
    autologin-user-timeout=0
    greeter-session=lightdm-gtk-greeter
    user-session=Lubuntu</p>

<h2>别的呢？</h2>

<p><a href="http://linux-sunxi.org/Main_Page">A10社区wiki</a>，可以找到一些已经做好的文件系统</p>

<h2>系统更新</h2>

<p>给出已经修改好的cubieboard的文件系统，包含了内核驱动，使用方法和<a href="http://bearqq.github.io/blog/2013/05/05/lubuntu/">上一篇文章</a>一样<br/>
    <a href="http://pan.baidu.com/share/link?shareid=3284898657&amp;uk=1243757679">http://pan.baidu.com/share/link?shareid=3284898657&amp;uk=1243757679</a></p>

<p>支持：<br/>
wifi，触摸，mali驱动，2D加速，可以运行x86的exe文件*，更多</p>

<p>不支持：<br/>
多点触摸，更多</p>

<p><img src="http://ww4.sinaimg.cn/large/45e13792gw1e5emkgdkd0j20sg0gote4.jpg" alt="" /></p>

<p>arm下如何运行x86程序？<a href="http://bearqq.github.io/blog/2013/06/06/run-x86-dot-exe-in-arm-linux/">且听下回分解</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lubuntu13.04 for A10 SD卡版本]]></title>
    <link href="http://blog.ooQoo.ovh/blog/2013/05/05/lubuntu/"/>
    <updated>2013-05-05T09:45:00+08:00</updated>
    <id>http://blog.ooQoo.ovh/blog/2013/05/05/lubuntu</id>
    <content type="html"><![CDATA[<p>之前放出了双系统版本，但是那个版本的linux分区被限制在1G，这是全智定义的限制。而且那个固件是vi10精英专用固件，想做通刷比较麻烦，因为固件占据了recovery的分区</p>

<p>那么今天要说的是sd卡版本，没有分区大小的限制，而且A10机型可通用。sd卡理论上2G够用，最好是4G以上的，我用的8G的卡测试。sd卡早就白菜价了。。</p>

<p>lubuntu是lxde桌面的ubuntu衍生版，内存占用更低，更适合。不要吐槽为什么有人叫他撸帮图</p>

<p>首先得下载下面地址的4个文件<br/>
    <a href="http://pan.baidu.com/share/link?shareid=518752&amp;uk=1243757679">http://pan.baidu.com/share/link?shareid=518752&amp;uk=1243757679</a></p>

<p>安装berryboot.apk，插上sd卡。<br/>
打开berryboot，用内置的安装程序直接安装到卡上。他会完全格式化sd卡，<strong>sd卡内所有文件将会丢失</strong>，并分为两个分区，一个60m左右的fat，一个为linux准备的分区。分区内的文件待会儿会删掉，用它就是来简化格式化和写入启动信息的。<br/>
拔下sd卡，将另外3个文件放到内置空间的根目录。</p>

<p>打开better terminal，或者使用adb shell，或者用ssh连接进入shell<br/>
插入sd卡，稍带几秒后在shell里执行以下语句<br/>
挂载sd卡。注：挂载点一定要是这几个，因为压缩包里包含的是完整目录
    mkdir /mnt/sd1
    mkdir /mnt/sd2
    busybox mount /dev/block/mmcblk0p1 /mnt/sd1
    busybox mount /dev/block/mmcblk0p2 /mnt/sd2
    rm -r /mnt/sd1/<em>
    rm -r /mnt/sd2/</em>
复制文件入sd卡
    busybox cp /sdcard/busybox /data
    chmod 777 /data/busybox
    /data/busybox tar xzvf /sdcard/sd1.tgz -C /
    /data/busybox tar xzvf /sdcard/sd2.tgz -C /
做机型适配。如果机型是vi10精英可以省略如下几行
    mkdir /mnt/nand
    busybox mount /dev/block/nanda /mnt/nand
    busybox cp /mnt/nand/script.bin /mnt/sd1/
    busybox cp /mnt/sd1/script.bin /mnt/sd1/evb.bin</p>

<p>关机。
开机时，如果sd卡在机器中，机器会启动到lubuntu，反之启动到正常的android。</p>

<p>root用户密码lu
lubuntu用户密码lu
平时请用lubuntu这个账户否则浏览器会提示什么我可不告诉你。登陆不会要密码。如果不想外接键盘，可以打开里面的cellwriter，也就是软键盘。</p>

<p>正常使用的功能：<br/>
wifi 触摸屏 更多。。</p>

<p>不可使用的功能：<br/>
flash  多点触摸  更多。。</p>

<p>附图：<br/>
<img src="http://ww1.sinaimg.cn/large/a74eed94jw1e4dkr49qo9j20sg0gotdg.jpg" alt="Lubuntu" /></p>

<p>更多linux的信息在下一个帖子<a href="http://1bearqq.github.io/blog/2013/06/06/linux-a10-cubieboard/"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chroot方式在android（linux）中运行linux]]></title>
    <link href="http://blog.ooQoo.ovh/blog/2013/05/01/chroot-linux/"/>
    <updated>2013-05-01T11:52:00+08:00</updated>
    <id>http://blog.ooQoo.ovh/blog/2013/05/01/chroot-linux</id>
    <content type="html"><![CDATA[<h1>这是什么</h1>

<p>有时候，需要在一个linux里运行另外一个linux。<br/>
- 比如可以在android里运行linux，以此运行linux的原生程序，以及爽快的用apt-get安装程序
- 比如vps商只支持debian5，而军哥的lnmp需要debian6
- 比如openwrt路由里想挂载一个debian来做一些正常linux做的事
OK，以上都可以满足，而且我都干过。方法都类似。<br/>
整个过程可以在linux下，或者用android手机搞定。</p>

<h1>准备文件系统</h1>

<h2>准备镜像文件</h2>

<p>镜像文件也就是xxx.img。话说，openvz的vps，以及部分android手机是没有loop的，也就是不能挂载img文件，那么我只能说，呵呵。把东西放到img里当然可以使文件变得整齐点，也更灵活，当然这也并不是必须做的。如果不想做img，那也可以直接在linux分区里运行，但肯定不能是fat32什么的……</p>

<p>创建镜像
    dd if=/dev/zero of=floppy.img bs=1024 count=2048100
这里我建了一个大概2G的文件，不要在意细节~想更多自己弄。<br/>
格式化ext2
    mkfs.ext2 floppy.img
想要别的格式自己弄。</p>

<p>由于android手机新建镜像困难，这里给出<a href="http://bearsigh.googlecode.com/files/f.tgz">建好的img</a>，自行解压</p>

<p>挂载镜像
    mkdir debian
    mount -o loop floppy.img debian/
卸载镜像
    umount debian</p>

<p>android手机可以把img放卡里，但是挂载的目标文件夹最好是放在data下，如
    cd /data
    mkdir debian
    mount -o loop /sdcard/floppy.img /data/debian/
并且，android手机可能需要安装busybox，并以busybox mount等形式执行</p>

<h2>系统文件，方法一 debian</h2>

<p>假设你手上有一台ubuntu//debian，那么可以用这个方式自己准备基础文件
    mkdir debian
当然，如果上面挂载了镜像，就cd到镜像挂载的上一级目录，因为待会儿会把文件释放到当前目录的debian目录下。
    sudo -s
    apt-get install debootstrap</p>

<p>下载基础文件
    debootstrap &ndash;verbose &ndash;arch=armel &ndash;foreign squeeze debian <a href="http://ftp.us.debian.org/debian">http://ftp.us.debian.org/debian</a>
这里我以arm架构为例。可自行更改，如i386，mips。
如此，基础文件已经准备就绪。</p>

<p>这里我提供很早以前准备的几个架构的基础文件，可以直接下下来解压到linux分区中。<br/>
<a href="http://bearsigh.googlecode.com/files/i386%20pure.tar.gz">i386</a>
<a href="http://bearsigh.googlecode.com/files/mips%20pure.tar.gz">mips</a>
<a href="http://bearsigh.googlecode.com/files/arm%20pure.tar">arm</a></p>

<p>然后需要将文件转移到目标文件系统中，如转移到android下并挂载，或转移到android的data目录下，或转移到openwrt的u盘中并且挂载。</p>

<p>进行第二阶段展开
    chroot debian /bin/bash
    /debootstrap/debootstrap &ndash;second-stage
添加源
    echo &lsquo;deb <a href="http://ftp.us.debian.org/debian">http://ftp.us.debian.org/debian</a> squeeze main contrib non-free&rsquo; > /etc/apt/sources.list
更新源
    export HOME=/root
    export LC_ALL=C
    apt-get update；apt-get upgrade
至此，文件系统搞定。</p>

<h2>系统文件，方法二 ubuntu</h2>

<p>ubuntu可以直接下到基础文件，并且解压到镜像或者目录中
如arm架构的<a href="https://releases.linaro.org/13.04/ubuntu/quantal-images">地址</a>。好简短的样子-。-</p>

<h2>系统文件，方法三 Backtrack</h2>

<p><a href="http://www.backtrack-linux.org/downloads/">Backtrack</a>从5开始就有arm架构的版本，当然x86架构肯定有的。下载下来就可以用，是个img文件。第6代名字更新为<a href="http://www.kali.org/downloads/">kali-linux</a></p>

<h1>安装一些必要的东西</h1>

<p>bt系统里东西够多了，alip版ubuntu里也不少，nano的和方法一里debian的就需要自己安装一些。</p>

<h2>进入系统的脚本</h2>

<p>如果中间没断开的话，那么现在是chroot到新linux里在运行。exit可以回到本机的shell。<br/>
那么如何从本机的shell里进去呢？参考脚本如下<br/>
挂载部分 startbt.sh:
    export kit=/sdcard/
    export mnt=/data/debian
    export PATH=$bin:/usr/bin:/usr/sbin:/bin:$PATH
    export TERM=linux
    export HOME=/root
    # Mounting Image to the farthest loop point
    # FIXME : check if mount sucessfull otherwise abort whole process.
    mknod /dev/block/loop254 b 7 254
    losetup /dev/block/loop254 $kit/floopy.img
    mount -t ext2 /dev/block/loop254 $mnt</p>

<pre><code>mount -t devpts devpts $mnt/dev/pts
mount -t proc proc $mnt/proc
mount -t sysfs sysfs $mnt/sys
#seting environment
sysctl -w net.ipv4.ip_forward=1
echo "Setting /etc/resolv.conf to Google Open DNS 8.8.8.8 and 8.8.4.4"
echo "nameserver 8.8.8.8" &gt; $mnt/etc/resolv.conf
echo "nameserver 8.8.4.4" &gt;&gt; $mnt/etc/resolv.conf
echo "127.0.0.1 localhost" &gt; $mnt/etc/hosts
</code></pre>

<p>同样，android上最好是mount等命令前加busybox。<br/>
进入shell bt.sh:
    export kit=/sdcard/
    export mnt=/data/debian
    export PATH=$bin:/usr/bin:/usr/sbin:/usr/local/bin/:/usr/local/sbin/:/bin:$PATH
    export TERM=linux
    export HOME=/root
    export SHELL=/bin/bash
    chroot $mnt /bin/bash
    export LANG=&ldquo;C.UTF-8&rdquo;
    export LC_ALL=&ldquo;C.UTF-8&rdquo;</p>

<p>那么开机以后，先要执行startbt.sh以挂载文件。一次即可。之后想要进入新linux的shell，只需在本机shell执行bt.sh。<br/>
如果不使用镜像，可酌情删去部分挂载镜像的语句。当然，也得修改镜像位置神马的。。</p>

<h2>安装一些可能有用的东西</h2>

<p>先来安装一堆节操
    apt-get install vim busybox wget screen
    apt-get install gcc g++ make
    apt-get install git</p>

<p>桌面和vncserver
    apt-get install tightvncserver lxde xterm
    vi /root/.vnc/xstartup
    vncserver
默认端口5901</p>

<p>opera
    cat >>/etc/apt/sources.list&lt;&lt;END
    deb <a href="http://deb.opera.com/opera/">http://deb.opera.com/opera/</a> stable non-free #Opera Browser (final releases)
    END
    wget -O - <a href="http://deb.opera.com/archive.key">http://deb.opera.com/archive.key</a> | apt-key add -
    apt-get update
    apt-get -y &ndash;force-yes install opera</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress安装过程摘要]]></title>
    <link href="http://blog.ooQoo.ovh/blog/2013/04/30/procedure/"/>
    <updated>2013-04-30T22:51:00+08:00</updated>
    <id>http://blog.ooQoo.ovh/blog/2013/04/30/procedure</id>
    <content type="html"><![CDATA[<h1>首先是一枚linux</h1>

<p>准备一枚linux是比较麻烦的事情，也有文章说windows可以，如<a href="http://sinosmond.github.io/blog/2012/03/12/install-and-deploy-octopress-to-github-on-windows7-from-scratch/">尝试win7的同学,</a>我也试了一下，不过在bundle install的时候报编译错误，然后就没有然后了。</p>

<p>我这里用的linux是arm版的ubuntu，先略过，只给一个连接以前在google code写的一个<a href="http://bearsigh.googlecode.com/files/i386pure.txt">debian的安装</a></p>

<h1>安装前的准备</h1>

<p>先安装git和ruby。ruby目前要求版本1.9.3，<a href="http://octopress.org/docs/setup/">详细查看</a>
命令：
    apt-get update;apt-get upgrade
    apt-get install git ruby1.9.3
sudo神马的，自己加。chroot表示没有
    ruby &ndash;version
版本不对的话，参考官网解决</p>

<h1>安装octopress到本地</h1>

<p>首先找个像样的文件夹，然后
    git clone git://github.com/imathis/octopress.git octopress
    cd octopress
装依赖
    gem install bundler
    bundle install
下面就是主题了，如果是默认主题的话就简单
    rake install</p>

<h2>安装现成主题</h2>

<p>混蛋，当然是先要找个主题了，去<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">这里</a>挑一个看得上的，找到其git地址。然后
    cd octopress
    git clone git://xxxxxx .themes/themename
    rake install [&lsquo;themename&rsquo;]
    rake generate</p>

<h2>配置octopress</h2>

<p>按理说应该先配置吧-。-<br/>
配置文件_config.yml，可以vi编辑之。文件末尾有很多<strong>根本不存在的网站</strong>可以把那些值改成false而华丽丽的无视掉。<br/>
还有个要配置的，就是你的github了。去github新建个账号，比如bearqq。<br/>
然后建个repo叫bearqq.github.com，前面必须是你的名字。然后设置一下ssh的key，这个不想多说。<br/>
然后嘛
    rake setup_github_pages
他会问你一些问题，如实回答即可。</p>

<h2>少年，来上第一发</h2>

<p>来写文章吧少年
    rake new_post[&ldquo;title&rdquo;]
然后他就会提示在哪儿哪儿生成了个交神马玩意的xxx.md文件，之后就去编辑一下吧。语法自己网上搜，没什么语法。尽可以进去以后打个hello world然后滚蛋。<br/>
话说，烦人的地方也在这里。有中文，需要用utf-8保存文件。如果生成文章的时候出错，那就在终端下执行
    export LANG=&ldquo;C.UTF-8&rdquo;
    export LC_ALL=&ldquo;C.UTF-8&rdquo;
可能需要做得事情
    apt-get install language-pack-zh language-pack-zh-base language-support-zh
    apt-get install locales
    dpkg-reconfigure locales
    export LC_ALL=&ldquo;zh_CN.UTF-8&rdquo;</p>

<h2>生成文章</h2>

<p>每次写完神马的，都要做这件事
    rake generate
    rake preview
preview可以内建一个服务器，端口4000，去浏览器里就能看到了。如果满意了的话，提交到github吧。
    rake deploy
第一次deploy要过十几分钟才能访问bearqq.github.com，后面会即使更新。</p>

<h2>添加评论</h2>

<p>尼玛一个博客没有评论敢出来溜达？？？</p>

<table>
    <tr>
        <td>
            &#31867;&#22411;
        </td>
        <td>
            &#22269;&#22806;&#26381;&#21153;
        </td>
        <td>
            &#22269;&#20869;&#26381;&#21153;
        </td>
    </tr>
    <tr>
        <td>
            Feed&#28903;&#21046; 
        </td>
        <td>
            FeedBurner 
        </td>
        <td>
            FeedSky
        </td>
    </tr>
    <tr>
        <td>
            &#20998;&#20139;&#21040; 
        </td>
        <td>
                AddThis 
        </td>
        <td>
            JiaThis
        </td>
    </tr>
    <tr>
        <td>
            &#24494;&#21338; 
        </td>
        <td>
                Twitter 
        </td>
        <td>
            weibo.com
        </td>
    </tr>
    <tr>
        <td>
            &#32593;&#32476;&#20070;&#31614; 
        </td>
        <td>
            Delicious, Google Bookmarks 
        </td>
        <td>
             QQ&#20070;&#31614;, &#30334;&#24230;&#25628;&#34255;
        </td>
    </tr>
    <tr>
        <td>
            &#32593;&#32476;&#22270;&#24202; 
        </td>
        <td>
            Flickr 
        </td>
        <td>
                yupoo , POCO
        </td>
    </tr>
    <tr>
        <td>
            &#32593;&#32476;&#35780;&#35770; 
        </td>
        <td>
            Disqus 
        </td>
        <td>
                &#21451;&#35328;
        </td>
    </tr>
</table>


<p>都同理可做，这里我用uyan.cc，因为代码简单-。-<br/>
去source/_includes/post，添加一个uyan.html，把uyan.cc网站上那段代码添加进去。
然后编辑_config.yml，文末加上
    # uyan
    uyan: true
最后去编辑source/_includes/article.html，在最后一个endif后面加上
    { % if site.uyan % }
    { % include post/uyan.html % }
    { % endif % }
然后每个帖子后面都会有留言框了。记得generate然后deploy<br/>
<strong><em>上面的大括号和百分号之间没有空格！</em></strong> 如果我去掉空格那他就把他转意了……理论上代码块不该被转意的……尼玛</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello world!]]></title>
    <link href="http://blog.ooQoo.ovh/blog/2013/04/30/hello-world-slash/"/>
    <updated>2013-04-30T20:04:00+08:00</updated>
    <id>http://blog.ooQoo.ovh/blog/2013/04/30/hello-world-slash</id>
    <content type="html"><![CDATA[<p>What happened?</p>
]]></content>
  </entry>
  
</feed>
